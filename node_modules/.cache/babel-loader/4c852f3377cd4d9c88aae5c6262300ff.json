{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Safi\\\\project-1\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport People from './components/People';\nimport Planets from './components/Planets';\nimport Home from './components/Home';\nimport Films from './components/Films';\n\nfunction App() {\n  const [people, setPeople] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [films, setFilms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchPeople() {\n      let res = await fetch('https://swapi.co/api/people/?format=json');\n      let data = await res.json();\n      setPeople(data.results); //setLoading(false);\n    }\n\n    async function fetchPlanets() {\n      let res = await fetch('https://swapi.co/api/planets/?format=json');\n      let data = await res.json();\n      setPlanets(data.results); //setLoading(false);\n    }\n\n    async function fetchFilms() {\n      let res = await fetch('https://swapi.co/api/films/?format=json');\n      let data = await res.json();\n      setFilms(data.results); //setLoading(false);\n    }\n\n    fetchPeople();\n    fetchPlanets();\n    fetchFilms(); //setLoading(false);\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, loading ? React.createElement(Dimmer, {\n    active: true,\n    inverted: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Loader, {\n    inverted: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \" Loading \")) : React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \" \", React.createElement(Home, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), \" \"), React.createElement(Route, {\n    exact: true,\n    path: \"/people\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \" \", React.createElement(People, {\n    data: people,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), \" \"), React.createElement(Route, {\n    exact: true,\n    path: \"/planets\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \" \", React.createElement(Planets, {\n    data: planets,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), \" \"), React.createElement(Route, {\n    exact: true,\n    path: \"/films\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \" \", React.createElement(Films, {\n    data: films,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), \" \")))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Safi/project-1/src/App.js"],"names":["React","useState","useEffect","Navbar","BrowserRouter","Router","Switch","Route","Container","Dimmer","Loader","People","Planets","Home","Films","App","people","setPeople","planets","setPlanets","films","setFilms","loading","setLoading","fetchPeople","res","fetch","data","json","results","fetchPlanets","fetchFilms"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport People from './components/People';\nimport Planets from './components/Planets';\nimport Home from './components/Home';\nimport Films from './components/Films';\n\nfunction App() {\n  const [people, setPeople]= useState([]);\n  const [planets, setPlanets]= useState([]);\n  const [films, setFilms]= useState([]);\n  const [loading, setLoading]= useState(true);\n  \n  useEffect (() => {\n  \n    async function fetchPeople(){\n      let res = await fetch('https://swapi.co/api/people/?format=json');\n      let data = await res.json();\n      setPeople(data.results);\n      //setLoading(false);\n    }\n  \n    async function fetchPlanets() {\n      let res = await fetch('https://swapi.co/api/planets/?format=json');\n      let data = await res.json();\n      setPlanets(data.results);\n      //setLoading(false);\n    }\n    async function fetchFilms() {\n      let res = await fetch('https://swapi.co/api/films/?format=json');\n      let data = await res.json();\n      setFilms(data.results);\n      //setLoading(false);\n    }\n\n    fetchPeople();\n    fetchPlanets();\n    fetchFilms();\n    //setLoading(false);\n  }, [])\n  \n  return (\n    <>\n      <Router>\n        <Navbar />\n        <Container>\n          {loading ? (\n            <Dimmer active inverted>\n              <Loader inverted> Loading </Loader> \n            </Dimmer>\n          ) : (\n            <Switch>\n              <Route exact path='/'> <Home /> </Route>\n              <Route exact path='/people'> <People data={ people }/> </Route>\n              <Route exact path='/planets'> <Planets data={ planets } /> </Route>\n              <Route exact path='/films'> <Films data={ films } /> </Route>\n            </Switch>\n          )}\n        </Container>\n     </Router>\n    </>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}